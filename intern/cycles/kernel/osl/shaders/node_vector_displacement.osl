/* SPDX-License-Identifier: Apache-2.0
 * Copyright 2011-2022 Blender Foundation */

#include "stdcycles.h"

shader node_vector_displacement(color Vector = color(0.0, 0.0, 0.0),
                                float Midlevel = 0.0,
                                float Scale = 1.0,
                                string space = "tangent",
                                string attr_name = "geom:tangent",
                                string attr_sign_name = "geom:tangent_sign",
                                output vector Displacement = vector(0.0, 0.0, 0.0))
{
  vector offset = (Vector - vector(Midlevel)) * Scale;

  if (space == "tangent") {
    /* Tangent space. */
    vector N_object = normalize(transform("world", "object", N));

    vector T_object;
    if (getattribute(attr_name, T_object)) {
      T_object = normalize(T_object);
    }
    else {
      T_object = normalize(dPdu);
    }

    vector B_object = normalize(cross(N_object, T_object));
    float tangent_sign;
    if (getattribute(attr_sign_name, tangent_sign)) {
      B_object *= tangent_sign;
    }

    Displacement = T_object * offset[0] + N_object * offset[1] + B_object * offset[2];
  }
  else {
    /* Object or world space. */
    Displacement = offset;
  }

  if (space != "world") {
    /* Tangent or object space. */
    Displacement = transform("object", "world", Displacement);
  }
}
