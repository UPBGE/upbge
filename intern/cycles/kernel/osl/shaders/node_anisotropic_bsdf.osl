/* SPDX-License-Identifier: Apache-2.0
 * Copyright 2011-2022 Blender Foundation */

#include "stdcycles.h"

shader node_anisotropic_bsdf(color Color = 0.0,
                             string distribution = "GGX",
                             float Roughness = 0.0,
                             float Anisotropy = 0.0,
                             float Rotation = 0.0,
                             normal Normal = N,
                             normal Tangent = normalize(dPdu),
                             output closure color BSDF = 0)
{
  /* rotate tangent around normal */
  vector T = Tangent;

  if (Rotation != 0.0)
    T = rotate(T, Rotation * M_2PI, point(0.0, 0.0, 0.0), Normal);

  /* compute roughness */
  float roughness = Roughness * Roughness;
  float roughness_u, roughness_v;
  float aniso = clamp(Anisotropy, -0.99, 0.99);

  if (aniso < 0.0) {
    roughness_u = roughness / (1.0 + aniso);
    roughness_v = roughness * (1.0 + aniso);
  }
  else {
    roughness_u = roughness * (1.0 - aniso);
    roughness_v = roughness / (1.0 - aniso);
  }

  if (distribution == "sharp")
    BSDF = Color * reflection(Normal);
  else if (distribution == "beckmann")
    BSDF = Color * microfacet_beckmann_aniso(Normal, T, roughness_u, roughness_v);
  else if (distribution == "GGX")
    BSDF = Color * microfacet_ggx_aniso(Normal, T, roughness_u, roughness_v);
  else if (distribution == "Multiscatter GGX")
    BSDF = Color * microfacet_multi_ggx_aniso(Normal, T, roughness_u, roughness_v, Color);
  else
    BSDF = Color * ashikhmin_shirley(Normal, T, roughness_u, roughness_v);
}
