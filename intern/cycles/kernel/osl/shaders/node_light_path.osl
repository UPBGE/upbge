/* SPDX-License-Identifier: Apache-2.0
 * Copyright 2011-2022 Blender Foundation */

#include "stdcycles.h"

shader node_light_path(output float IsCameraRay = 0.0,
                       output float IsShadowRay = 0.0,
                       output float IsDiffuseRay = 0.0,
                       output float IsGlossyRay = 0.0,
                       output float IsSingularRay = 0.0,
                       output float IsReflectionRay = 0.0,
                       output float IsTransmissionRay = 0.0,
                       output float IsVolumeScatterRay = 0.0,
                       output float RayLength = 0.0,
                       output float RayDepth = 0.0,
                       output float DiffuseDepth = 0.0,
                       output float GlossyDepth = 0.0,
                       output float TransparentDepth = 0.0,
                       output float TransmissionDepth = 0.0)
{
  IsCameraRay = raytype("camera");
  IsShadowRay = raytype("shadow");
  IsDiffuseRay = raytype("diffuse");
  IsGlossyRay = raytype("glossy");
  IsSingularRay = raytype("singular");
  IsReflectionRay = raytype("reflection");
  IsTransmissionRay = raytype("refraction");
  IsVolumeScatterRay = raytype("volume_scatter");

  getattribute("path:ray_length", RayLength);

  int ray_depth = 0;
  getattribute("path:ray_depth", ray_depth);
  RayDepth = (float)ray_depth;

  int diffuse_depth = 0;
  getattribute("path:diffuse_depth", diffuse_depth);
  DiffuseDepth = (float)diffuse_depth;

  int glossy_depth = 0;
  getattribute("path:glossy_depth", glossy_depth);
  GlossyDepth = (float)glossy_depth;

  int transparent_depth = 0;
  getattribute("path:transparent_depth", transparent_depth);
  TransparentDepth = (float)transparent_depth;

  int transmission_depth = 0;
  getattribute("path:transmission_depth", transmission_depth);
  TransmissionDepth = (float)transmission_depth;
}
